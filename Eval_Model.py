

import argparse
from Tools.Eval import Evaluate_Model
import os


def str2bool(value):
    """Convert string to boolean for command line arguments."""
    if isinstance(value, bool):
        return value
    if value.lower() in ('true', '1'):
        return True
    elif value.lower() in ('false', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError(f"Boolean value expected, got {value}")


def main():
    """
    WRAPPER SCRIPT, to evaluate YOLOv8-pose using 5-fold cross-validation. Allows calling Eval.py from command line, notebook, or other scripts. 

    Prints evaluations and saves to csv files.
    """
    parser = argparse.ArgumentParser(description="Evaluate Model Wrapper")
    
    # Arguments
    parser.add_argument('--code-directory', type=str, required=True, help='Path to the code directory')
    parser.add_argument('--dataset-dir-standard', type=str, required=True, help='Path to the rotating bounding box dataset')
    parser.add_argument('--dataset-dir-rotate', type=str, required=True, help='Path to the rotating bounding box dataset')
    parser.add_argument('--fold-folder-nme', type=str, required=True, help='name of the folder that contains the 5 fold results')
    parser.add_argument('--save-loc', type=str, required=True, help='full path to save location for results')
    parser.add_argument('--test-set', type=str2bool, default=False, help='Flag to indicate if the dataset is a test set')
    parser.add_argument('--view-images', type=str2bool, default=False, help='Flag to view results on images')
    # parser.add_argument("--eval-external", type=str2bool, default=False, help="Bool to calculate  results")
    parser.add_argument("--verbose-view-images", type=str2bool, default=False, help="Flag to view images with verbose output")
    parser.add_argument('--post-process-kpts', type=str2bool, default=False, help='Flag to include keypoint post-processing')
    parser.add_argument('--image-size', type=int, default=640, help='Image size for evaluation')
    parser.add_argument('--folds', type=int, default=5, help='Number of folds for validation')
    parser.add_argument('--furcation-dist-thresh', type=float, default=0.05, help='Threshold for furcation distance')
    parser.add_argument('--box-iou-thresh', type=float, default=0.35, help='IOU threshold to link predicted and target boxes')
    parser.add_argument('--include-fp-fn-nme', type=str2bool, default=False, help='Include unmatched keypoints in NME metrics')
    parser.add_argument('--include-fp-fn-prck', type=str2bool, default=False, help='Include unmatched keypoints in PRCK metrics')
    parser.add_argument('--non-max-merge-thresh', type=float, default=0.5, help='Non-max suppression threshold for merging boxes')
    parser.add_argument('--pred-seg-iou', type=float, default=0.7, help='IOU threshold for predicted segmentation masks')
    parser.add_argument('--pred-seg-conf', type=float, default=0.3, help='Confidence threshold for predicted segmentation masks')
    parser.add_argument('--pred-kpts-iou', type=float, default=0.7, help='IOU threshold for predicted keypoints')
    parser.add_argument('--pred-kpts-conf', type=float, default=0.3, help='Confidence threshold for predicted keypoints')

                        
    args = parser.parse_args()

    # creates save location if does not exist
    if not os.path.exists(args.save_loc):
        os.makedirs(args.save_loc)
    # changes save loc subfolder name if already exists
    save_loc_temp = os.path.join(args.save_loc, 'run_1')
    if os.path.exists(save_loc_temp):
        i = 1
        while os.path.exists(os.path.join(args.save_loc, f'run_{i}')):
            i += 1
        save_loc_temp = os.path.join(args.save_loc, f'run_{i}')
    os.makedirs(save_loc_temp)
    args.save_loc = save_loc_temp

    # Paths (WARNING: THIS SPECIFIES TRAINED PATHS AUTO GENERATED BY TRAINING SCRIPT, CHANGE IF TARGET MODEL WEIGHTS ARE IN DIFFERENT SUBFOLDERS)
    best_seg_weights = os.path.join(args.code_directory, 'runs/segment/train/weights/best.pt')
    weight_path_orig = os.path.join(args.code_directory, 'runs/pose', args.fold_folder_nme)
    weights_orig = [
        'train/weights/best.pt',
        'train3/weights/best.pt',
        'train4/weights/best.pt',
        'train5/weights/best.pt',
        'train6/weights/best.pt'
    ]
    rotate_loc_orig = args.dataset_dir_rotate
    
    if args.test_set:
        pred_imgs_orig = os.path.join(args.dataset_dir_standard, 'images')
        pred_lbls_orig = os.path.join(args.dataset_dir_standard, 'labels')
    else:
        pred_imgs_orig = args.dataset_dir_standard
        pred_lbls_orig = args.dataset_dir_standard

    # Keypoint classes
    kpt_classes = [
        'CEJ_mesial', 'BoneLevel_mesial', 'RootLevel_mesial', 'CEJ_distal', 
        'BoneLevel_distal', 'RootLevel_distal', 'RootLevel_centre', 
        'FurcationApex', 'FurcationBoneLevel_mesial', 'FurcationBoneLevel_distal', 'ARR'
    ]

    # Evaluate model
    Evaluate_Model(
        weight_path_orig, weights_orig, rotate_loc_orig, pred_imgs_orig, pred_lbls_orig, 
        best_seg_weights, kpt_classes, args
    )

if __name__ == "__main__":
    main()

